const mongoose = require('mongoose');

const AlertSchema = new mongoose.Schema({
  storeId: {
    type: String,
    required: true,
    trim: true,
    ref: 'Store'
  },
  alertType: {
    type: String,
    required: true,
    enum: [
      'staffing_increase',
      'staffing_decrease', 
      'queue_overflow',
      'till_maintenance',
      'peak_hour_warning',
      'low_efficiency',
      'system_notification'
    ]
  },
  severity: {
    type: String,
    required: true,
    enum: ['low', 'medium', 'high', 'critical'],
    default: 'medium'
  },
  title: {
    type: String,
    required: true,
    trim: true
  },
  message: {
    type: String,
    required: true,
    trim: true
  },
  triggerData: {
    currentOccupancy: Number,
    queueLength: Number,
    avgWaitTime: Number,
    posRate: Number,
    staffCount: Number,
    threshold: Number,
    tillNumber: Number
  },
  recommendations: [{
    action: {
      type: String,
      required: true
    },
    priority: {
      type: String,
      enum: ['low', 'medium', 'high'],
      default: 'medium'
    },
    estimatedImpact: String,
    timeframe: String
  }],
  isActive: {
    type: Boolean,
    default: true
  },
  isAcknowledged: {
    type: Boolean,
    default: false
  },
  acknowledgedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  acknowledgedAt: Date,
  resolvedAt: Date,
  autoGenerated: {
    type: Boolean,
    default: true
  },
  recurrence: {
    type: String,
    enum: ['once', 'daily', 'weekly', 'monthly'],
    default: 'once'
  },
  nextTriggerTime: Date,
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

// Indexes for better query performance
AlertSchema.index({ storeId: 1, isActive: 1, createdAt: -1 });
AlertSchema.index({ alertType: 1, severity: 1 });
AlertSchema.index({ owner: 1, isActive: 1 });
AlertSchema.index({ isAcknowledged: 1, isActive: 1 });

// Static method to create staffing alert
AlertSchema.statics.createStaffingAlert = function(storeId, owner, data) {
  const { queueLength, avgWaitTime, currentOccupancy } = data;
  
  let alertType, severity, title, message, recommendations;
  
  if (queueLength > 10 || avgWaitTime > 15) {
    alertType = 'staffing_increase';
    severity = queueLength > 15 ? 'high' : 'medium';
    title = 'High Queue Alert';
    message = `Queue length is ${queueLength} with average wait time of ${avgWaitTime} minutes. Consider increasing staff.`;
    recommendations = [
      {
        action: 'Open additional till',
        priority: 'high',
        estimatedImpact: 'Reduce wait time by 30-40%',
        timeframe: 'Immediate'
      },
      {
        action: 'Call backup staff',
        priority: 'medium',
        estimatedImpact: 'Improve overall efficiency',
        timeframe: '15-20 minutes'
      }
    ];
  } else if (queueLength < 2 && avgWaitTime < 3) {
    alertType = 'staffing_decrease';
    severity = 'low';
    title = 'Low Queue Alert';
    message = `Queue is minimal with wait time of ${avgWaitTime} minutes. Consider optimizing staff allocation.`;
    recommendations = [
      {
        action: 'Rotate staff for break',
        priority: 'low',
        estimatedImpact: 'Maintain efficiency while managing costs',
        timeframe: 'Next 30 minutes'
      }
    ];
  }
  
  if (alertType) {
    return this.create({
      storeId,
      owner,
      alertType,
      severity,
      title,
      message,
      triggerData: data,
      recommendations
    });
  }
  
  return null;
};

// Static method to create queue overflow alert
AlertSchema.statics.createQueueAlert = function(storeId, owner, data) {
  const { queueLength, tillNumber, avgWaitTime } = data;
  
  if (queueLength > 8) {
    return this.create({
      storeId,
      owner,
      alertType: 'queue_overflow',
      severity: queueLength > 12 ? 'critical' : 'high',
      title: `Till ${tillNumber} Queue Overflow`,
      message: `Till ${tillNumber} has ${queueLength} customers with ${avgWaitTime} minutes wait time.`,
      triggerData: data,
      recommendations: [
        {
          action: `Direct customers to other tills`,
          priority: 'high',
          estimatedImpact: 'Distribute queue load',
          timeframe: 'Immediate'
        },
        {
          action: 'Announce queue management',
          priority: 'medium',
          estimatedImpact: 'Improve customer experience',
          timeframe: 'Immediate'
        }
      ]
    });
  }
  
  return null;
};

// Instance method to acknowledge alert
AlertSchema.methods.acknowledge = function(userId) {
  this.isAcknowledged = true;
  this.acknowledgedBy = userId;
  this.acknowledgedAt = new Date();
  return this.save();
};

// Instance method to resolve alert
AlertSchema.methods.resolve = function() {
  this.isActive = false;
  this.resolvedAt = new Date();
  return this.save();
};

module.exports = mongoose.model('Alert', AlertSchema);