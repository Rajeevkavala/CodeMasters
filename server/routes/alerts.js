const express = require('express');
const { body, validationResult, query } = require('express-validator');
const { authMiddleware } = require('../middleware/authMiddleware');
const Alert = require('../models/Alert');
const Store = require('../models/Store');

const router = express.Router();

// Apply auth middleware to all routes
router.use(authMiddleware);

// @route   GET /api/alerts
// @desc    Get all alerts for authenticated user
// @access  Private
router.get('/', [
  query('storeId').optional().notEmpty().withMessage('Store ID cannot be empty'),
  query('isActive').optional().isBoolean().withMessage('isActive must be boolean'),
  query('severity').optional().isIn(['low', 'medium', 'high', 'critical']).withMessage('Invalid severity level'),
  query('page').optional().isInt({ min: 1 }).withMessage('Page must be positive integer'),
  query('limit').optional().isInt({ min: 1, max: 50 }).withMessage('Limit must be between 1 and 50')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Validation errors',
        errors: errors.array()
      });
    }

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;

    // Build query
    const query = { owner: req.user.userId };

    if (req.query.storeId) {
      query.storeId = req.query.storeId;
    }

    if (req.query.isActive !== undefined) {
      query.isActive = req.query.isActive === 'true';
    }

    if (req.query.severity) {
      query.severity = req.query.severity;
    }

    const [alerts, total] = await Promise.all([
      Alert.find(query)
        .populate('acknowledgedBy', 'name email')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit),
      Alert.countDocuments(query)
    ]);

    res.json({
      success: true,
      alerts,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });

  } catch (error) {
    console.error('Get alerts error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching alerts'
    });
  }
});

// @route   GET /api/alerts/:id
// @desc    Get single alert by ID
// @access  Private
router.get('/:id', async (req, res) => {
  try {
    const alert = await Alert.findOne({
      _id: req.params.id,
      owner: req.user.userId
    }).populate('acknowledgedBy', 'name email');

    if (!alert) {
      return res.status(404).json({
        success: false,
        message: 'Alert not found'
      });
    }

    res.json({
      success: true,
      alert
    });

  } catch (error) {
    console.error('Get alert error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching alert'
    });
  }
});

// @route   POST /api/alerts
// @desc    Create a new manual alert
// @access  Private
router.post('/', [
  body('storeId').notEmpty().withMessage('Store ID is required'),
  body('alertType').isIn([
    'staffing_increase',
    'staffing_decrease', 
    'queue_overflow',
    'till_maintenance',
    'peak_hour_warning',
    'low_efficiency',
    'system_notification'
  ]).withMessage('Invalid alert type'),
  body('severity').isIn(['low', 'medium', 'high', 'critical']).withMessage('Invalid severity level'),
  body('title').notEmpty().withMessage('Title is required'),
  body('message').notEmpty().withMessage('Message is required')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Validation errors',
        errors: errors.array()
      });
    }

    const {
      storeId,
      alertType,
      severity,
      title,
      message,
      triggerData,
      recommendations,
      recurrence
    } = req.body;

    // Verify store exists and belongs to user
    const store = await Store.findOne({
      storeId,
      owner: req.user.userId,
      isActive: true
    });

    if (!store) {
      return res.status(404).json({
        success: false,
        message: 'Store not found or access denied'
      });
    }

    const alert = new Alert({
      storeId,
      alertType,
      severity,
      title,
      message,
      triggerData,
      recommendations,
      recurrence,
      autoGenerated: false,
      owner: req.user.userId
    });

    await alert.save();

    res.status(201).json({
      success: true,
      message: 'Alert created successfully',
      alert
    });

  } catch (error) {
    console.error('Create alert error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while creating alert'
    });
  }
});

// @route   PUT /api/alerts/:id/acknowledge
// @desc    Acknowledge an alert
// @access  Private
router.put('/:id/acknowledge', async (req, res) => {
  try {
    const alert = await Alert.findOne({
      _id: req.params.id,
      owner: req.user.userId
    });

    if (!alert) {
      return res.status(404).json({
        success: false,
        message: 'Alert not found'
      });
    }

    if (alert.isAcknowledged) {
      return res.status(400).json({
        success: false,
        message: 'Alert is already acknowledged'
      });
    }

    await alert.acknowledge(req.user.userId);

    res.json({
      success: true,
      message: 'Alert acknowledged successfully',
      alert
    });

  } catch (error) {
    console.error('Acknowledge alert error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while acknowledging alert'
    });
  }
});

// @route   PUT /api/alerts/:id/resolve
// @desc    Resolve an alert
// @access  Private
router.put('/:id/resolve', async (req, res) => {
  try {
    const alert = await Alert.findOne({
      _id: req.params.id,
      owner: req.user.userId
    });

    if (!alert) {
      return res.status(404).json({
        success: false,
        message: 'Alert not found'
      });
    }

    if (!alert.isActive) {
      return res.status(400).json({
        success: false,
        message: 'Alert is already resolved'
      });
    }

    await alert.resolve();

    res.json({
      success: true,
      message: 'Alert resolved successfully',
      alert
    });

  } catch (error) {
    console.error('Resolve alert error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while resolving alert'
    });
  }
});

// @route   DELETE /api/alerts/:id
// @desc    Delete an alert
// @access  Private
router.delete('/:id', async (req, res) => {
  try {
    const alert = await Alert.findOne({
      _id: req.params.id,
      owner: req.user.userId
    });

    if (!alert) {
      return res.status(404).json({
        success: false,
        message: 'Alert not found'
      });
    }

    await Alert.findByIdAndDelete(req.params.id);

    res.json({
      success: true,
      message: 'Alert deleted successfully'
    });

  } catch (error) {
    console.error('Delete alert error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while deleting alert'
    });
  }
});

// @route   GET /api/alerts/stats/:storeId
// @desc    Get alert statistics for a store
// @access  Private
router.get('/stats/:storeId', async (req, res) => {
  try {
    const { storeId } = req.params;

    // Verify store belongs to user
    const store = await Store.findOne({
      storeId,
      owner: req.user.userId,
      isActive: true
    });

    if (!store) {
      return res.status(404).json({
        success: false,
        message: 'Store not found or access denied'
      });
    }

    const stats = await Alert.aggregate([
      {
        $match: {
          storeId,
          owner: req.user.userId
        }
      },
      {
        $group: {
          _id: null,
          totalAlerts: { $sum: 1 },
          activeAlerts: { 
            $sum: { $cond: ['$isActive', 1, 0] } 
          },
          acknowledgedAlerts: { 
            $sum: { $cond: ['$isAcknowledged', 1, 0] } 
          },
          criticalAlerts: { 
            $sum: { $cond: [{ $eq: ['$severity', 'critical'] }, 1, 0] } 
          },
          highAlerts: { 
            $sum: { $cond: [{ $eq: ['$severity', 'high'] }, 1, 0] } 
          },
          mediumAlerts: { 
            $sum: { $cond: [{ $eq: ['$severity', 'medium'] }, 1, 0] } 
          },
          lowAlerts: { 
            $sum: { $cond: [{ $eq: ['$severity', 'low'] }, 1, 0] } 
          }
        }
      }
    ]);

    const alertStats = stats.length > 0 ? stats[0] : {
      totalAlerts: 0,
      activeAlerts: 0,
      acknowledgedAlerts: 0,
      criticalAlerts: 0,
      highAlerts: 0,
      mediumAlerts: 0,
      lowAlerts: 0
    };

    // Get recent alerts
    const recentAlerts = await Alert.find({
      storeId,
      owner: req.user.userId,
      isActive: true
    })
    .sort({ createdAt: -1 })
    .limit(5)
    .select('alertType severity title createdAt');

    res.json({
      success: true,
      data: {
        stats: alertStats,
        recentAlerts
      }
    });

  } catch (error) {
    console.error('Get alert stats error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching alert statistics'
    });
  }
});

module.exports = router;